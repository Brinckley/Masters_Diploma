version: '3.8'

services:

  nginx:
    image: nginx:1.19
    container_name: nginx
    ports:
      - 80:80
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - uploader
    networks:
      - converter-network

  uploader:
    build:
      context: ./uploader
    container_name: uploader-container
    ports:
      - 8080:8080
    env_file:
      - ./config/env/uploader.env
    depends_on:
      audio-cleaner:
        condition: service_healthy
      basic-pitch-worker:
        condition: service_healthy
    networks:
      converter-network:
        aliases:
          - uploader
      test-network:
        aliases:
          - uploader
    volumes:
      - uploads-data:/app/uploads
      - midis-data:/app/midis
      - ./tmp/uploads:/app/uploads
      - ./tmp/midis:/app/midis

  audio-cleaner:
    build:
      context: ./audio-cleaner
    container_name: audio-cleaner-container
    ports:
      - 8001:8001
    env_file:
      - ./config/env/audio-cleaner.env
    depends_on:
      basic-pitch-worker:
        condition: service_healthy
    networks:
      converter-network:
        aliases:
          - audio-cleaner
    volumes:
      - uploads-data:/app/uploads
      - ./tmp/uploads:/app/uploads
    healthcheck:
      test: curl --fail http://localhost:8001/healthcheck_solo || exit 1
      interval: 30s  
      timeout: 10s   
      retries: 3     
      start_period: 5s

  basic-pitch-worker:
    build:
      context: ./basic-pitch-worker
    container_name: basic-pitch-worker-container
    ports:
      - 8011:8011
    env_file:
      - ./config/env/basic-pitch-worker.env
    networks:
      converter-network:
        aliases:
          - basic-pitch-worker
    volumes:
      - uploads-data:/app/uploads
      - midis-data:/app/midis
      - ./tmp/uploads:/app/uploads
      - ./tmp/midis:/app/midis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/healthcheck"]
      interval: 30s  
      timeout: 10s   
      retries: 3     
      start_period: 5s 
    
  tgclient:
    build:
      context: ./tgclient
    container_name: tgclient
    env_file:
      - ./config/env/tgclient.env
    networks:
      converter-network:
        aliases:
          - tgclient
    

#  prometheus:
#    image: prom/prometheus
#    ports:
#      - 9090:9090
#    volumes:
#      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    networks:
#      - converter-network
#
#  grafana:
#    image: grafana/grafana
#    ports:
#      - 3000:3000
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin
#    networks:
#      - converter-network

networks:
  converter-network:
    driver: bridge
  test-network:
    external: true

volumes:
  uploads-data:
    driver: local
  midis-data:
    driver: local